import java_cup.runtime.*;
   
parser code {:
    boolean syntaxErrors = false;
    public void syntax_error(Symbol current_token) {
        syntaxErrors = true;
        report_error("Syntax error at line " + (current_token.left+1) + ", column "+ current_token.right, null);
    }

:};


terminal PLUS, SEMI, CHAR, CHARCONST, BOOL, INT, RAT, FLOAT, TOP, PRINT, READ, THEN, ELSE, IF, FI, WHILE, DO, OD, FORALL, IN, RETURN, DIV, MULT, SUBTRACT, ASSIGN, EQ, NOTEQ, AND, OR, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, FDEF, MAIN, DICT, SEQ, BOOLCONST, NUM, ID, LANGLE, COMMA, RANGLE, POW, NOT, LTEQ, CONCAT, IMPLIES, TDEF, ALIAS, STRING, DOT, ERROR;

/* Non terminals */
non terminal            S, decList, dec, funcDef, main, params, moreParams, returnType, type;
non terminal            typeDef, typeFields, moreTypeFields, aliasDec, varDec, varInit, varAssignment;
non terminal            expression, arithExpression, boolExpression, concat, inCheck;
non terminal            statement, moreStatements, statementList, controlFlow;
non terminal            aggregateType, dictType, seqLiteral, dictLiteral;
non terminal            keyValPair, keyValPairList, moreKeyPairs, seqValList, moreSeqVals;
non terminal            alphaBody, alphaDec, debugVarDec, type_or_alias, returnStatement, seqSlicing, functionCall;
non terminal            csExpressions, csExpressionsNonEmpty;

/* Precedences */
precedence left COMMA;
precedence left OR;
precedence left AND;
precedence left IMPLIES;
precedence left NOT;
precedence left NOTEQ;
precedence left EQ;
precedence left LTEQ;
precedence left LANGLE;
precedence left IN;
precedence left CONCAT;
precedence left SUBTRACT;
precedence left PLUS;
precedence left DIV;
precedence left MULT;
precedence left POW;
precedence left ID;
precedence left RPAREN;
precedence left LPAREN;


/* The grammar rules */

S         ::= decList main decList          //{: System.out.println("-----------------\nSuccessful Test\n-----------------");:}
            ;

main      ::= MAIN LBRACE alphaBody RBRACE SEMI       //{: System.out.println("Main");:}
            ;

decList   ::=                               
            | dec decList                   
            ;

dec       ::= funcDef                       //{: System.out.println("\n\t^ End Of Function Definition");:} 
            | typeDef                       //{: System.out.println("End Of Type Definition");:} 
            | aliasDec                      //{: System.out.println("Alias Declaration");:} 
            | varDec                        //{: System.out.println("Variable Declaration");:} 
            ;

funcDef   ::= FDEF ID LPAREN params RPAREN LBRACE alphaBody RBRACE returnType SEMI
            ;

params    ::= 
            | ID COLON type_or_alias moreParams
            ;

moreParams ::=
             | COMMA params
             ;

returnType ::=
             | COLON type_or_alias
             ;

type       ::= FLOAT 
             | INT 
             | RAT 
             | BOOL 
             | CHAR 
             | TOP 
             | aggregateType
             ;

typeDef   ::= TDEF ID LBRACE typeFields RBRACE SEMI
            ;

typeFields ::= ID COLON type_or_alias moreTypeFields
             ;

type_or_alias ::= type
           | ID
           ;

moreTypeFields ::=
                 | COMMA typeFields
                 ;

aliasDec ::= ALIAS type_or_alias ID SEMI
           ;

varDec ::= ID COLON type_or_alias varInit SEMI
         ;

varInit ::=
          | ASSIGN csExpressionsNonEmpty               //{: System.out.print("(Initialised) ");:}
          ;

varAssignment ::= ID ASSIGN csExpressionsNonEmpty                //{: System.out.println("Variable Assignment");:}
                | ID DOT ID ASSIGN csExpressionsNonEmpty         //{: System.out.println("Variable Assignment - Dot");:}
                | ID LBRACKET expression RBRACKET ASSIGN csExpressionsNonEmpty     
                                                        //{: System.out.println("Variable Assignment - SeqIndex");:}
                ;

expression ::= LPAREN expression RPAREN
             | ID                   
             | arithExpression            
             | boolExpression               
             | BOOLCONST
             | CHARCONST                  
             | NUM                          
             | STRING
             | concat
             | dictLiteral
             | seqLiteral
             | seqSlicing   // also used for indexing
             | functionCall
             | inCheck
             | SUBTRACT expression
             | ID DOT ID
             ;

csExpressionsNonEmpty ::= expression
                        | expression COMMA csExpressionsNonEmpty
                        ;


alphaBody ::= alphaDec alphaBody
            | debugVarDec alphaBody
            | statementList
            ;

alphaDec ::= funcDef
           | typeDef
           | aliasDec
           ;

/*  Necessary for printing out var dec in correct place  */
debugVarDec ::= varDec                                              //{: System.out.println("Variable Declaration");:} 
              ;

statementList ::= statement moreStatements
                ;

moreStatements ::=
                 | statementList
                 ;

statement ::= varAssignment SEMI                
            | controlFlow    
            | functionCall SEMI
            | READ ID SEMI
            | PRINT expression SEMI          
            ;

controlFlow ::= WHILE LPAREN expression RPAREN DO alphaBody OD
              | FORALL LPAREN expression IN expression RPAREN DO alphaBody OD
              | IF LPAREN expression RPAREN THEN alphaBody FI
              | IF LPAREN expression RPAREN THEN alphaBody ELSE alphaBody FI
              | RETURN returnStatement SEMI                                           //{: System.out.println("Return Statement");:}
              ;

returnStatement ::= 
                  | expression
                  ;

inCheck ::= expression IN expression
          ;

concat ::= expression CONCAT expression
         ;

functionCall ::= ID LPAREN csExpressions RPAREN
               ;

csExpressions ::= 
                | expression
                | expression COMMA csExpressions
                ;

seqSlicing ::= ID LBRACKET expression COLON expression RBRACKET
             | ID LBRACKET COLON expression RBRACKET
             | ID LBRACKET expression COLON RBRACKET
             | ID LBRACKET expression RBRACKET
             ;

dictLiteral ::= LBRACE keyValPairList RBRACE
              ;

keyValPairList ::= 
                 | keyValPair moreKeyPairs
                 ;

moreKeyPairs ::= 
               | COMMA keyValPair moreKeyPairs
               ;

keyValPair ::= expression COLON expression
             ;

seqLiteral ::= LBRACKET seqValList RBRACKET
             ;

seqValList ::= 
             | expression moreSeqVals
             ;

moreSeqVals ::= 
              | COMMA expression moreSeqVals
              ;

aggregateType ::= DICT LANGLE dictType RANGLE
                | SEQ LANGLE type_or_alias RANGLE
                ;

dictType ::= type_or_alias COMMA type_or_alias
           ;

arithExpression ::= expression PLUS expression
                  | expression SUBTRACT expression
                  | expression MULT expression
                  | expression DIV expression
                  | expression POW expression
                  ;

boolExpression ::= NOT expression
                 | expression LANGLE expression
                 | expression LTEQ expression
                 | expression EQ expression
                 | expression NOTEQ expression
                 | expression AND expression
                 | expression OR expression
                 | expression IMPLIES expression
                 ;
